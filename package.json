{
  "version": "0.4.2-beta",
  "buildVersion": "0.4.2-beta",
  "author": "George Georgulas IV <georgegeorgulas@gmail.com> (https://github.com/VirtualEstatePlanner)",
  "copyright": "Â© 2019-2021 The MEGADocker Group",
  "private": true,
  "main": "electron.js",
  "license": "Unlicense",
  "homepage": ".",
  "name": "megadocker",
  "productName": "MEGADocker",
  "description": "A tool to easily create docker swarm stacks",
  "scripts": {
    "postinstall": "yarn build-transpile && electron-builder install-app-deps",
    "unbinaries": "rm -rf binaries && mkdir -p binaries/mac/intel binaries/mac/arm binaries/win/intel binaries/win/arm binaries/linux/intel binaries/linux/arm",
    "unbuild": "rm -rf build/*",
    "uncache": "rm -rf cache/electron/* cache/electron-builder/*",
    "undist": "rm -rf dist/*",
    "undocker": "run-s -l unbuild uncache unelectron",
    "unerror": "rm -rf yarn-error.log",
    "unelectron": "rm -rf public/electron.js && rm -rf electron.js && rm -rf preload.js",
    "uninstall": "rm -rf yarn.lock && rm -rf node_modules",
    "clean": "run-p -l unbinaries uncache undist unelectron unerror",
    "reinstall": "yarn clean && yarn uninstall && yarn",
    "reindex": "cp src/scripts/tsnode/tsconfig.json . && npx ts-node src/scripts/utility/reindex.ts",
    "new:man": "cp src/scripts/tsnode/tsconfig.json . && npx ts-node src/scripts/partmakers/newManikin.ts",
    "new:mem": "cp src/scripts/tsnode/tsconfig.json . && npx ts-node src/scripts/partmakers/newMemory.ts",
    "new:sm": "cp src/scripts/tsnode/tsconfig.json . && npx ts-node src/scripts/partmakers/newServiceMite.ts",
    "new:nm": "cp src/scripts/tsnode/tsconfig.json . && npx ts-node src/scripts/partmakers/newNetworkMite.ts",
    "new:cm": "cp src/scripts/tsnode/tsconfig.json . && npx ts-node src/scripts/partmakers/newCustomMite.ts",
    "tsc-build": "yarn reindex && tsc public/electron.ts",
    "tsc-dev": "cp public/preload.js . && cp public/electron.ts . && tsc electron.ts -w",
    "react-start": "react-scripts start",
    "react-dev": "cross-env BROWSER=none yarn react-start",
    "electron-dev": "sleep 15 && wait-on http://localhost:3000 && cross-env NODE_ENV=development electron .",
    "develop": "cross-env NODE_ENV=development run-p -l tsc-dev react-dev electron-dev",
    "react-test": "react-scripts test --env=jsdom",
    "react-test-coverage": "react-scripts test --coverage --env=jsdom",
    "react-eject": "echo 'WARNING: THIS PROCESS CANNOT BE REVERSED - GIT COMMIT FIRST SO YOU CAN ROLL BACK' && echo && echo 'if you really hate create-react-app this much, manually run:' && echo && echo '                                                                 react-scripts eject' && echo",
    "react-build": "IMAGE_INLINE_SIZE_LIMIT=0 react-scripts build && rm build/electron.ts",
    "test": "yarn test-coverage && yarn test-dev",
    "test-dev": "jest --watch",
    "test-coverage": "jest --coverage",
    "build-transpile": "run-s unbuild tsc-build react-build",
    "warning:mac-only": "echo && echo 'CRATE warning: This script will only function on macOS' && echo",
    "dist:linux-intel64": "yarn undist && cross-env NODE_ENV=production electron-builder -l -c ./electron-configs/linux-intel-64.yml && mv dist/*.AppImage binaries/linux/intel/",
    "dist:linux-arm64": "yarn undist && cross-env NODE_ENV=production electron-builder -l -c ./electron-configs/linux-arm-64.yml && mv dist/*.AppImage binaries/linux/arm/",
    "dist:linux": "run-s dist:linux-intel64 dist:linux-arm64",
    "dist:mac-intel64": "yarn undist && cross-env NODE_ENV=production electron-builder -m -c ./electron-configs/mac-intel-64.yml && mv dist/*.dmg binaries/mac/intel/",
    "dist:mac-arm64": "yarn undist && cross-env NODE_ENV=production electron-builder -m -c ./electron-configs/mac-arm-64.yml && mv dist/*.dmg binaries/mac/arm/",
    "dist:mac": "run-s dist:mac-intel64 dist:mac-arm64",
    "dist:win-intel64": "yarn undist && cross-env NODE_ENV=production electron-builder -w -c ./electron-configs/win-intel-64.yml && mv dist/*.exe binaries/win/intel/",
    "dist:win-arm64": "yarn undist && cross-env NODE_ENV=production electron-builder -w -c ./electron-configs/win-arm-64.yml && mv dist/*.exe binaries/win/arm/",
    "dist:win": "run-s dist:win-intel64 dist:win-arm64",
    "dist:all": "run-s -l warning:mac-only clean build-transpile dist:linux dist:mac dist:win",
    "postdist:all": "say 'All distributables output to binaries directory.'"
  },
  "keywords": [
    "authelia",
    "docker",
    "drupal",
    "duplicati",
    "elasticsearch",
    "ghost",
    "grocy",
    "heimdall",
    "kanboard",
    "kibana",
    "jackett",
    "lazylibrarian",
    "ledger",
    "lidarr",
    "logstash",
    "mariadb",
    "mealie",
    "mylar",
    "mongodb",
    "n8n",
    "nextcloud",
    "nginx",
    "openldap",
    "phpldapadmin",
    "plex",
    "portainer",
    "postgresql",
    "radarr",
    "redis",
    "rocketchat",
    "sonarr",
    "styleguidist",
    "swarmpit",
    "syncthing",
    "traefik",
    "wordpress"
  ],
  "dependencies": {
    "@emotion/react": "latest",
    "@emotion/styled": "latest",
    "@fontsource/asap": "latest",
    "@material-ui/core": "next",
    "@material-ui/icons": "next",
    "@material-ui/styles": "next",
    "file-saver": "latest",
    "jszip": "latest",
    "react": "latest",
    "react-dom": "latest",
    "react-scripts": "latest"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "latest",
    "@testing-library/react": "latest",
    "@types/electron-devtools-installer": "latest",
    "@types/file-saver": "latest",
    "@types/jest": "latest",
    "@types/material-ui": "latest",
    "@types/node": "latest",
    "@types/prettier": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "cross-env": "latest",
    "electron": "latest",
    "electron-builder": "latest",
    "electron-devtools-installer": "latest",
    "electron-is-dev": "latest",
    "npm-run-all": "latest",
    "open": "latest",
    "prettier": "latest",
    "ts-jest": "latest",
    "ts-node": "latest",
    "typescript": "latest",
    "wait-on": "latest",
    "yaml-validator": "latest"
  },
  "jest": {
    "roots": [
      "<rootDir>/src"
    ],
    "collectCoverage": true,
    "coverageReporters": [
      "lcov"
    ],
    "coverageDirectory": "coverage",
    "coverageThreshold": {
      "global": {
        "branches": 0,
        "functions": 0,
        "lines": 0,
        "statements": 0
      }
    },
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "setupFilesAfterEnv": [
      "@testing-library/jest-dom/extend-expect"
    ],
    "moduleNameMapper": {
      "\\.(css)$": "<rootDir>/src/typings/css.d.ts",
      "\\.(png)$": "<rootDir>/src/typings/png.d.ts"
    }
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
