{
  "version": "0.3.6-beta",
  "buildVersion": "0.3.6-beta",
  "author": "George Georgulas IV <georgegeorgulas@gmail.com> (https://github.com/VirtualEstatePlanner)",
  "copyright": "Â© 2020 The MEGADocker Group",
  "private": true,
  "main": "electron.js",
  "license": "Unlicense",
  "homepage": ".",
  "scripts": {
    "postinstall": "yarn build-transpile && electron-builder install-app-deps && echo && echo 'yarn install: environment updated and prepared for electron build' && echo",
    "install-homebrew": "/usr/bin/ruby -e $(curl -fsSl https://raw.githubusercontent.com/Homebrew/install/master/install)",
    "brew-install-gettext": "brew install gettext",
    "homebrew-gettext": "run-s install-homebrew brew-install-gettext",
    "unbinaries": "rm -rf binaries && mkdir -p binaries/mac/intel binaries/mac/arm binaries/win/intel binaries/win/arm binaries/linux/intel binaries/linux/arm && echo && echo 'unbinaries: binary artifacts deleted' && echo",
    "unbuild": "rm -rf build && mkdir build && echo && echo 'unbuild: build artifacts deleted' && echo",
    "uncache": "rm -rf cache && mkdir -p cache/electron cache/electron-builder && echo && echo 'uncache: removed electron end elctron-builder for windows caches' && echo",
    "undist": "rm -rf dist && mkdir dist && echo && echo 'undist: distribution artifacts deleted' && echo",
    "undocker": "run-s -l unbuild uncache unelectron",
    "unerror": "rm -rf yarn-error.log && echo && echo 'unerror: yarn error log deleted' && echo",
    "unelectron": "rm -rf public/electron.js && rm -rf electron.js && rm -rf preload.js && echo && echo 'unelectron: electron.js artifacts deleted' && echo",
    "uninstall": "rm -rf yarn.lock && rm -rf node_modules && echo && echo 'uninstall: node modules and yarn lockfiles deleted' && echo",
    "clean": "run-p -l unbinaries uncache undist unelectron unerror && echo && echo 'clean: all artifacts deleted' && echo",
    "tsc-build": "tsc public/electron.ts && echo && echo 'tsc-build: transpiled public/electron.js'",
    "tsc-dev": "cp public/preload.js . && cp public/electron.ts . && tsc electron.ts -w && echo && echo 'tsc-dev: watching and transpiling electron.js'",
    "reinstall": "yarn clean && rm -rf node_modules && yarn && echo && echo 'reinstall: rebuilt node_modules && echo'",
    "react-start": "react-scripts start",
    "react-dev": "cross-env BROWSER=none yarn react-start",
    "electron-dev": "sleep 15 && wait-on http://localhost:3000 && cross-env NODE_ENV=development electron .",
    "develop": "cross-env NODE_ENV=development run-p -l tsc-dev react-dev electron-dev",
    "react-test": "react-scripts test --env=jsdom",
    "react-test-coverage": "react-scripts test --coverage --env=jsdom",
    "react-eject": "echo 'WARNING: THIS PROCESS CANNOT BE REVERSED - GIT COMMIT FIRST SO YOU CAN ROLL BACK' && echo && echo 'if you really hate create-react-app this much, manually run:' && echo && echo '                                                             react-scripts eject' && echo && echo",
    "react-build": "IMAGE_INLINE_SIZE_LIMIT=0 react-scripts build && echo && echo 'react-build: built artifacts in build/' && echo",
    "build-transpile": "run-s unbuild tsc-build react-build",

    "dist:mac-intel64": "cross-env NODE_ENV=production electron-builder --config ./electron-configs/mac-intel-64.yml && mv dist/*.dmg binaries/mac/intel/",
    "dist:mac-arm64": "cross-env NODE_ENV=production electron-builder --config ./electron-configs/mac-arm-64.yml && mv dist/*.dmg binaries/mac/arm/",
    "dist:mac": "run-s dist:mac-intel64 dist:mac-arm64",

    "dist:win-intel64": "cross-env NODE_ENV=production electron-builder --config ./electron-configs/win-intel-64.yml && mv dist/*.exe binaries/win/intel/",
    "dist:win-arm64": "cross-env NODE_ENV=production electron-builder --config ./electron-configs/win-arm-64.yml && mv dist/*.exe binaries/win/arm/",
    "dist:win": "run-s dist:win-intel64 dist:win-arm64",
    
    "dist:win-intel64-docker": "yarn warning:docker-only && docker run --rm --env ELECTRON_CACHE='/root/.cache/electron' --env ELECTRON_BUILDER_CACHE='/root/.cache/electron-builder' -v ${PWD}:/project -v ${PWD}/cache/electron:/root/.cache/electron -v ${PWD}/cache/electron-builder:/root/.cache/electron-builder electronuserland/builder:wine-mono yarn dist:win-intel64",
    "dist:win-arm64-docker": "yarn warning:docker-only && docker run --rm --env ELECTRON_CACHE='/root/.cache/electron' --env ELECTRON_BUILDER_CACHE='/root/.cache/electron-builder' -v ${PWD}:/project -v ${PWD}/cache/electron:/root/.cache/electron -v ${PWD}/cache/electron-builder:/root/.cache/electron-builder electronuserland/builder:wine-mono yarn dist:win-arm64",
    "dist:win-docker": "run-s dist:win-intel64-docker dist:win-arm64-docker",

    "dist:linux-intel64": "cross-env NODE_ENV=production electron-builder --config ./electron-configs/linux-intel-64.yml && mv dist/*.AppImage binaries/linux/intel/",
    "dist:linux-arm64": "cross-env NODE_ENV=production electron-builder --config ./electron-configs/linux-arm-64.yml && mv dist/*.AppImage binaries/linux/arm/",
    "dist:linux": "run-s dist:linux-intel64 dist:linux-arm64",

    "warning:mac-only": "echo && echo 'CRATE warning: This script will only function on macOS' && echo",
    "warning:docker-only": "echo && echo 'CRATE warning: This script will not function on macOS without docker' && echo",
    "dist:all": "run-s -l warning:mac-only clean build-transpile dist:linux dist:mac dist:win-docker",
    "postdist:all": "say 'All distributables output to binaries directory.'",

    "cr-build-w": "run-s warning:docker-only dist-w-docker"
    
  },
  "name": "megadocker",
  "productName": "MEGADocker",
  "description": "A tool to easily create docker swarm stacks",
  "keywords": [
    "authelia",
    "docker",
    "drupal",
    "duplicati",
    "elasticsearch",
    "ghost",
    "grocy",
    "heimdall",
    "kanboard",
    "kibana",
    "kubernetes",
    "jackett",
    "lazylibrarian",
    "ledger",
    "lidarr",
    "logstash",
    "mylar",
    "n8n",
    "nextcloud",
    "nginx",
    "openldap",
    "phpldapadmin",
    "plex",
    "portainer",
    "radarr",
    "rocketchat",
    "sonarr",
    "styleguidist",
    "swarmpit",
    "traefik",
    "wordpress"
  ],
  "dependencies": {
    "@material-ui/core": "latest",
    "@material-ui/icons": "latest",
    "@material-ui/styles": "latest",
    "file-saver": "latest",
    "fontsource-asap": "latest",
    "jszip": "latest",
    "opener": "latest",
    "react": "latest",
    "react-dom": "latest",
    "react-scripts": "latest"
  },
  "devDependencies": {
    "@types/electron-devtools-installer": "latest",
    "@types/file-saver": "latest",
    "@types/jest": "latest",
    "@types/node": "latest",
    "@types/opener": "latest",
    "@types/react": "latest",
    "@types/react-dom": "latest",
    "cross-env": "latest",
    "electron": "latest",
    "electron-builder": "latest",
    "electron-devtools-installer": "latest",
    "electron-is-dev": "latest",
    "node": "latest",
    "npm-run-all": "latest",
    "prettier": "latest",
    "typescript": "latest",
    "wait-on": "latest"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
