{
  "version": "0.3.3-beta",
  "buildVersion": "0.3.3-beta",
  "author": "George Georgulas IV <georgegeorgulas@gmail.com> (https://github.com/VirtualEstatePlanner)",
  "copyright": "Â© 2020 The MEGADocker Group",
  "private": true,
  "main": "electron.js",
  "license": "Unlicense",
  "homepage": ".",
  "scripts": {
    "postinstall": "yarn build-transpile && electron-builder install-app-deps && echo && echo 'yarn install: environment updated and prepared for build' && echo",
    "install-homebrew": "/usr/bin/ruby -e $(curl -fsSl https://raw.githubusercontent.com/Homebrew/install/master/install)",
    "brew-install-gettext": "brew install gettext",
    "homebrew-gettext": "run-s install-homebrew brew-install-gettext",
    "unbinaries": "rm -rf binaries && mkdir binaries && echo && echo 'unbinaries: binary artifacts deleted' && echo",
    "uncache": "rm -rf cache/electron/* && rm -rf cache/electron-builder/* && echo && echo 'uncache: removed electron end elctron-builder for windows caches' && echo",
    "unbuild": "rm -rf build && mkdir build && echo && echo 'unbuild: build artifacts deleted' && echo",
    "undist": "rm -rf dist && mkdir dist && echo && echo 'undist: distribution artifacts deleted' && echo",
    "unerror": "rm -rf yarn-error.log && echo && echo 'unerror: yarn error log deleted' && echo",
    "unelectron": "rm -rf public/electron.js && rm -rf electron.js && rm -rf preload.js && echo && echo 'unelectron: electron.js artifacts deleted' && echo",
    "uninstall": "rm -rf yarn.lock && rm -rf node_modules && echo && echo 'uninstall: node modules and yarn lockfiles deleted' && echo",
    "clean": "run-s -l unbinaries uncache undist unelectron unerror && echo && echo 'clean: all artifacts deleted' && echo",
    "purge": "run-s -l unbinaries uncache undist unelectron unerror uninstall && echo && echo 'purge: all modules and artifacts deleted' && echo",
    "tsc-build": "tsc public/electron.ts && echo && echo 'tsc-build: transpiled public/electron.js'",
    "tsc-dev": "cp public/preload.js . && cp public/electron.ts . && tsc electron.ts -w && echo && echo 'tsc-dev: watching and transpiling electron.js'",
    "reinstall": "yarn purge && yarn && echo && echo 'reinstall: rebuilt node_modules && echo'",
    "react-start": "react-scripts start",
    "react-dev": "cross-env BROWSER=none yarn react-start",
    "electron-dev": "sleep 15 && wait-on http://localhost:3000 && cross-env NODE_ENV=development electron .",
    "develop": "cross-env NODE_ENV=development run-p -l tsc-dev react-dev electron-dev",
    "react-test": "react-scripts test --env=jsdom",
    "react-test-coverage": "react-scripts test --coverage --env=jsdom",
    "react-eject": "echo 'WARNING: THIS PROCESS CANNOT BE REVERSED - GIT COMMIT FIRST SO YOU CAN ROLL BACK' && echo && echo 'if you really hate create-react-app this much, manually run:' && echo && echo '                                                             react-scripts eject' && echo && echo",
    "react-build": "react-scripts build && echo && echo 'react-build: built artifacts in build/' && echo",
    "macos-warning": "echo && echo 'macos-warning: This npm script will only function on macos' && echo",
    "not-macos-warning": "echo && echo 'not-macos-warning: This npm script will not function on macos except in docker' && echo",
    "cr-build": "cross-env NODE_ENV=production electron-builder",
    "cr-build-most": "yarn cr-build -lw",
    "build-transpile": "run-s unbuild tsc-build react-build",
    "dist-most": "run-s -l not-macos-warning clean build-transpile cr-build-most",
    "postdist-most": "run-p -l move-l move-w",
    "cr-build-lmw": "yarn macos-warning && yarn cr-build -lm && yarn cr-build-w-docker",
    "dist-all": "run-s -l macos-warning clean build-transpile cr-build-lmw",
    "postdist-all": "run-p -l move-l move-m move-w && say 'All distributables output to binaries directory.'",
    "cr-build-l": "yarn cr-build -l",
    "dist-l": "run-s -l unelectron build-transpile cr-build-l && echo && echo 'dist-l: built linux .AppImage' && echo",
    "move-l": "mv dist/*.AppImage binaries/ && echo && echo 'move-l: moved linux .AppImage to binaries/' && echo",
    "postdist-l": "yarn move-l",
    "cr-build-m": "yarn cr-build -m",
    "dist-m": "run-s -l unelectron build-transpile cr-build-m && echo && echo 'dist-m: built mac .dmg' && echo",
    "move-m": "mv dist/*.dmg binaries/ && echo && echo 'move-m: moved mac .dmg to binaries/' && echo",
    "postdist-m": "yarn move-m",
    "cr-build-w": "yarn not-macos-warning && yarn cr-build -w",
    "dist-w": "run-s -l unelectron build-transpile cr-build-w && echo && echo 'dist-w: built windows .exe' && echo",
    "move-w": "mv dist/*.exe binaries/ && echo && echo 'move-w: moved windows .exe to binaries/' && echo",
    "cr-build-w-docker": "docker run --rm --env ELECTRON_CACHE='/root/.cache/electron' --env ELECTRON_BUILDER_CACHE='/root/.cache/electron-builder' -v ${PWD}:/project -v ${PWD}/cache/electron:/root/.cache/electron -v ${PWD}/cache/electron-builder:/root/.cache/electron-builder electronuserland/builder:wine-mono yarn cr-build-w",
    "precr-build-w-docker": "rm -rf cache && mkdir cache && mkdir cache/electron && mkdir cache/electron-builder",
    "dist-w-docker": "run-s -l build-transpile cr-build-w-docker && echo && echo 'dist-docker: built windows .exe' && echo",
    "undocker": "run-s -l unbuild uncache unelectron",
    "predist-w-docker": "echo && echo 'did you want to run yarn undocker first?' && echo",
    "postdist-w-docker": "yarn move-w",
    "postdist-w": "yarn move-w"
  },
  "build": {
    "appId": "com.VirtualEstatePlanner.MEGADocker",
    "asar": true,
    "files": [
      "node_modules/node-notifier/vendor/snoreToast/SnoreToast.exe"
    ],
    "dmg": {
      "title": "MEGADocker",
      "contents": [
        {
          "x": 400,
          "y": 150,
          "type": "link",
          "path": "/Applications"
        },
        {
          "x": 150,
          "y": 150,
          "type": "file"
        }
      ]
    },
    "mac": {
      "target": [
        "dmg"
      ],
      "category": "public.app-category.developer-tools",
      "icon": "./src/images/icons/icon.icns",
      "identity": null
    },
    "win": {
      "target": [
        "portable"
      ],
      "icon": "./src/images/icons/icon.ico"
    },
    "linux": {
      "target": [
        "AppImage"
      ],
      "category": "Development"
    }
  },
  "name": "megadocker",
  "productName": "MEGADocker",
  "description": "A tool to easily create docker swarm stacks",
  "keywords": [
    "docker",
    "drupal",
    "duplicati",
    "elasticsearch",
    "ghost",
    "grocy",
    "heimdall",
    "kanboard",
    "kibana",
    "kubernetes",
    "jackett",
    "lazylibrarian",
    "ledger",
    "lidarr",
    "logstash",
    "mylar",
    "n8n",
    "nextcloud",
    "nginx",
    "openldap",
    "phpldapadmin",
    "plex",
    "portainer",
    "radarr",
    "rocketchat",
    "sonarr",
    "swarmpit",
    "traefik",
    "wordpress"
  ],
  "dependencies": {
    "@material-ui/core": "^4.9.14",
    "@material-ui/icons": "^4.9.1",
    "@material-ui/styles": "^4.9.14",
    "file-saver": "^2.0.2",
    "jszip": "^3.4.0",
    "opener": "^1.5.1",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "react-scripts": "^3.4.1"
  },
  "devDependencies": {
    "@types/electron-devtools-installer": "^2.0.3",
    "@types/file-saver": "^1.3.0",
    "@types/jest": "^24.0.0",
    "@types/node": "12.12.2",
    "@types/opener": "^1.4.0",
    "@types/react": "^16.9.35",
    "@types/react-dom": "^16.9.8",
    "cross-env": "^7.0.2",
    "electron": "^9.0.0",
    "electron-builder": "^22.6.1",
    "electron-devtools-installer": "^3.0.0",
    "electron-is-dev": "^1.2.0",
    "node": "14.2.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.0.5",
    "typescript": "^3.9.0",
    "wait-on": "^5.0.0"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
